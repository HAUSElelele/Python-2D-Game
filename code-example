import pygame

pygame.init()
win = pygame.display.set_mode((800, 480)) 
icon = pygame.display.set_icon(pygame.image.load('playerFace.png')) 
pygame.display.set_caption("Mario 2.0") 

walkRight = [pygame.image.load('player_11.png'),
pygame.image.load('player_12.png'),
pygame.image.load('player_13.png'),
pygame.image.load('player_17.png'),
pygame.image.load('player_18.png'),
pygame.image.load('player_19.png')]

walkLeft = [pygame.image.load('player_14.png'),
pygame.image.load('player_15.png'),
pygame.image.load('player_16.png'),
pygame.image.load('player_20.png'),
pygame.image.load('player_21.png'),
pygame.image.load('player_22.png')]

playerStand = pygame.image.load('player_23.png')
Background = pygame.image.load('bg.png')


clock = pygame.time.Clock()
x = 50 
y = 425 
width = 64
height = 64 
speed = 5 
Jump = False
JumpCount = 10
left = False 
right = False 
animCount = 0
lastMove = "Right"
run = True


class shell(): 
    def __init__(self, x, y, r, color, facing):
        self.x = x
        self.y = y
        self.r = r
        self.color = color
        self.facing = facing
        self.vel = 8 * facing

    def draw(self, win):
        pygame.draw.circle(win, self.color, (self.x, self.y), self.r) 

def drawWindow():
        global animCount
        win.blit(Background, (0,0)) 

        if animCount + 1 >= 30: 
            animCount = 0

        if left:
            win.blit(walkLeft[animCount // 5], (x, y)) 
            animCount += 1
        elif right:
            win.blit(walkRight[animCount // 5], (x, y)) 
            animCount += 1
        else:
            win.blit(playerStand, (x, y)) 

        for bullet in bullets:
            bullet.draw(win)

        pygame.display.update() 

bullets = []
while run:
    #pygame.time.delay(50) 
    clock.tick(30)

    for event in pygame.event.get():
        if event.type == pygame.QUIT: 
            run = False 

    for bullet in bullets:
        if bullet.x < 800 and bullet.x > 0:
            bullet.x += bullet.vel
        else:
            bullets.pop(bullets.index(bullet)) 

    keys = pygame.key.get_pressed() 

    if keys[pygame.K_f]:
        if lastMove == "Right":
            facing = 1
        else:
            facing = -1

        if len(bullets) < 10:
            bullets.append(shell(round(x + width // 2), round(y + height // 2), 5, (255, 0, 0), facing))

    if keys[pygame.K_LEFT] and x > 5: 
        x -= speed 
        left = True
        right = False
        lastMove = "Left"
    elif keys[pygame.K_RIGHT] and x < 800 - width - 5: 
        x += speed 
        right = True
        left = False
        lastMove = "Right"
    else:
        right = False
        left = False
        animCount = 0
    if not(Jump):
        if keys[pygame.K_SPACE]:
            Jump = True
    else: 
          if JumpCount >= -10:
              y -= JumpCount * 2
              JumpCount -= 1
          else:
              Jump = False
              JumpCount = 10

    drawWindow() 

pygame.quit() 
